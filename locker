#!/bin/bash
set -e
base="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")"
TEMP="$(mktemp -d 'locker.XXXXXXXXXX')"
[ -n "$TEMP" -a -d "$TEMP" -a -w "$TEMP" ] || exit 1
_cleanup(){ rm -rf "$TEMP"; }
trap _cleanup EXIT

usage(){
	printf 'usage (public-key encrypt): ./locker.sh --public-key=mykey.pub --input=myfile --output=myfile.enc\n'
	printf 'usage (private-key decrypt): ./locker.sh --private-key=mykey.pub --input=myfile.enc --output=myfile\n'
	printf 'usage (password encrypt): ./locker.sh --password-encrypt --input=myfile --output=myfile.enc\n'
	printf 'usage (password decrypt): ./locker.sh --password-decrypt --input=myfile.enc --output=myfile\n'
	printf 'Other options:\n'
	printf '    --base64 encode outputs (or decode inputs) prior to encrypting/decrypting\n'
	printf '    --help   print this message and exit\n'
}

seckey=
pubkey=
dosym=
dobase64=
input=
output=
while [[ $# -gt 0 ]]; do
	arg="$1"; shift

	case "$arg" in
		--private-key=*)
			seckey="${arg#*=}"
		;;
		--public-key=*)
			pubkey="${arg#*=}"
		;;
		--password-encrypt)
			dosym=encrypt
		;;
		--password-decrypt)
			dosym=decrypt
		;;
		--base64)
			dobase64=1
		;;
		--input=*)
			input="${arg#*=}"
		;;
		--output=*)
			output="${arg#*=}"
		;;
		--help)
			usage
			exit
		;;
		*)
			usage >&2
			exit 1
		;;
	esac
done

if [[ -z "$input" ]] || [[ -z "$output" ]] || [[ -z "$seckey$pubkey$dosym" ]]; then
	usage >&2
	exit 1
fi

dobase64_decode(){
	local input="$1"; shift
	if [[ "$dobase64" = "1" ]]; then
		base64 -d < "$input"
	else
		cat "$input"
	fi
}

dobase64_encode(){
	local output="$1"; shift

	if [[ "$dobase64" = "1" ]]; then
		base64 > "$output"
	else
		cat > "$output"
	fi
}

if [[ "$dosym" = "encrypt" ]]; then
	openssl enc -aes-256-cbc -salt -in "$input" | dobase64_encode "$output"
elif [[ "$dosym" = "decrypt" ]]; then
	openssl enc -d -aes-256-cbc -in <( dobase64_decode "$input" ) -out "$output"
elif [[ -n "$seckey" ]]; then
	tar -C "$TEMP" -zxf <( dobase64_decode "$input" )
	openssl rsautl -decrypt -inkey "$seckey" -in "$TEMP/key.bin.enc" |
	openssl enc -d -aes-256-cbc -in "$TEMP/payload.bin.enc" -pass fd:0 | gzip -d -c > "$output"
else
	if [[ "$(head -c 4 "$pubkey" )" = "ssh-" ]]; then
		ssh-keygen -f "$pubkey" -e -m PKCS8 > "$TEMP/pub.pem"
		pubkey="$TEMP/pub.pem"
	fi

	openssl rand -base64 128 |
	tee \
		>( openssl rsautl -encrypt -inkey "$pubkey" -pubin -in /dev/stdin -out "$TEMP/key.bin.enc" && touch "$TEMP/key.bin.ok" || touch "$TEMP/key.bin.fail" ) \
		| openssl enc -aes-256-cbc -salt -in <( gzip -c < "$input" ) -out "$TEMP/payload.bin.enc" -pass fd:0

	while [[ ! -e "$TEMP/key.bin.ok" ]] && [[ ! -e "$TEMP/key.bin.fail" ]]; do sleep 0.001; done
	if [[ -e "$TEMP/key.bin.fail" ]]; then
		printf 'Failed to encrypt random key\n' >&2
		exit 1
	fi
	tar --transform='s#.*/##' -c "$TEMP/payload.bin.enc" "$TEMP/key.bin.enc" | gzip -c | dobase64_encode "$output"
fi
